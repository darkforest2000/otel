DONE: 
- Реализовать хранение трейсов в ClickHouse
- Реализовать хранение логов в ClickHouse
- Tail-based sampling

TODO:
- Prometheus:
  - Стандартные метрики Go-приложения: Добавьте сбор стандартных метрик времени выполнения Go (количество горутин, использование памяти, статистика сборщика мусора). Это можно сделать с помощью существующих библиотек инструментации OpenTelemetry для Go (например, go.opentelemetry.io/contrib/instrumentation/runtime).
  - Более гранулированные HTTP метрики: Хотя длительность и статус-код запроса есть в атрибутах спанов, для дашбордов и алертинга полезно иметь выделенные метрики: частота запросов (rate), частота ошибок (error rate) по каждому эндпоинту, распределение задержек (histograms). otelhttp обычно предоставляет их "из коробки", если MeterProvider настроен. Убедитесь, что они собираются и экспортируются в Prometheus.
  - Метрики насыщения (Saturation): Для критически важных ресурсов (CPU, память, диск, сеть) рассмотрите возможность экспорта метрик насыщения. node_exporter или cAdvisor, интегрированные с Prometheus, могут помочь с этим на уровне хоста/контейнера.
  - Метрики PostgreSQL, ClickHouse, Jaeger, etc.
  - (?) Использование таблицы otel_logs.metrics в ClickHouse: В clickhouse-init.sql определена таблица metrics. Если есть планы по долгосрочному хранению метрик в ClickHouse (например, для аналитики, отличной от возможностей Prometheus), можно настроить OpenTelemetry Collector для экспорта метрик и туда. Однако Prometheus является общепринятым стандартом для оперативных метрик и алертинга.
- Jaeger:
  - Использование Baggage: В otel.go настроена передача Baggage. Подумайте, есть ли какая-либо сквозная контекстная информация (например, уровень пользователя, флаги экспериментов), которую можно было бы передавать через Baggage и использовать в атрибутах спанов или для условной логики/логирования в последующих сервисах.
- Общая наблюдаемость:
  - Алертинг (Alerting): Это критически важный следующий шаг. Настройте алерты на основе метрик (например, по частоте ошибок, высокой задержке, низкой пропускной способности, насыщению ресурсов) с использованием Prometheus Alertmanager и/или возможностей Grafana Alerting.
  - Карта сервисов (Service Map): Jaeger UI и некоторые конфигурации Grafana могут генерировать карту сервисов на основе данных трейсинга. Убедитесь, что эта функция доступна и используется. Дашборд трейсов в Grafana (grafana/dashboards/traces.json) содержит панель "nodeGraph", которая может выполнять эту роль.
  - Управление затратами: Следите за расходами на хранение и обработку данных телеметрии. Политики хранения уже настроены (TTL для логов в ClickHouse - 30 дней). Оптимизируйте сбор данных по мере необходимости (сэмплирование, уменьшение кардинальности меток метрик).
- Другие:
  - Очистка: Удалить неиспользуемый корневой файл logger.go и соответствующие зависимости из go.mod/go.sum.
  - Алертинг: Начать настройку базовых алертов.